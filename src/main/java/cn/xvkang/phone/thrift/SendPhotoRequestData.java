/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.xvkang.phone.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-07-19")
public class SendPhotoRequestData implements org.apache.thrift.TBase<SendPhotoRequestData, SendPhotoRequestData._Fields>, java.io.Serializable, Cloneable, Comparable<SendPhotoRequestData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendPhotoRequestData");

  private static final org.apache.thrift.protocol.TField JWT_FIELD_DESC = new org.apache.thrift.protocol.TField("jwt", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BASE64IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("base64image", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SMS_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("smsTemplateId", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SendPhotoRequestDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SendPhotoRequestDataTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String jwt; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String base64image; // optional
  public int smsTemplateId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JWT((short)1, "jwt"),
    BASE64IMAGE((short)2, "base64image"),
    SMS_TEMPLATE_ID((short)3, "smsTemplateId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JWT
          return JWT;
        case 2: // BASE64IMAGE
          return BASE64IMAGE;
        case 3: // SMS_TEMPLATE_ID
          return SMS_TEMPLATE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SMSTEMPLATEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.JWT,_Fields.BASE64IMAGE,_Fields.SMS_TEMPLATE_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JWT, new org.apache.thrift.meta_data.FieldMetaData("jwt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.BASE64IMAGE, new org.apache.thrift.meta_data.FieldMetaData("base64image", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.SMS_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("smsTemplateId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendPhotoRequestData.class, metaDataMap);
  }

  public SendPhotoRequestData() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SendPhotoRequestData(SendPhotoRequestData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetJwt()) {
      this.jwt = other.jwt;
    }
    if (other.isSetBase64image()) {
      this.base64image = other.base64image;
    }
    this.smsTemplateId = other.smsTemplateId;
  }

  public SendPhotoRequestData deepCopy() {
    return new SendPhotoRequestData(this);
  }

  @Override
  public void clear() {
    this.jwt = null;
    this.base64image = null;
    setSmsTemplateIdIsSet(false);
    this.smsTemplateId = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJwt() {
    return this.jwt;
  }

  public SendPhotoRequestData setJwt(@org.apache.thrift.annotation.Nullable java.lang.String jwt) {
    this.jwt = jwt;
    return this;
  }

  public void unsetJwt() {
    this.jwt = null;
  }

  /** Returns true if field jwt is set (has been assigned a value) and false otherwise */
  public boolean isSetJwt() {
    return this.jwt != null;
  }

  public void setJwtIsSet(boolean value) {
    if (!value) {
      this.jwt = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getBase64image() {
    return this.base64image;
  }

  public SendPhotoRequestData setBase64image(@org.apache.thrift.annotation.Nullable java.lang.String base64image) {
    this.base64image = base64image;
    return this;
  }

  public void unsetBase64image() {
    this.base64image = null;
  }

  /** Returns true if field base64image is set (has been assigned a value) and false otherwise */
  public boolean isSetBase64image() {
    return this.base64image != null;
  }

  public void setBase64imageIsSet(boolean value) {
    if (!value) {
      this.base64image = null;
    }
  }

  public int getSmsTemplateId() {
    return this.smsTemplateId;
  }

  public SendPhotoRequestData setSmsTemplateId(int smsTemplateId) {
    this.smsTemplateId = smsTemplateId;
    setSmsTemplateIdIsSet(true);
    return this;
  }

  public void unsetSmsTemplateId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SMSTEMPLATEID_ISSET_ID);
  }

  /** Returns true if field smsTemplateId is set (has been assigned a value) and false otherwise */
  public boolean isSetSmsTemplateId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SMSTEMPLATEID_ISSET_ID);
  }

  public void setSmsTemplateIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SMSTEMPLATEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case JWT:
      if (value == null) {
        unsetJwt();
      } else {
        setJwt((java.lang.String)value);
      }
      break;

    case BASE64IMAGE:
      if (value == null) {
        unsetBase64image();
      } else {
        setBase64image((java.lang.String)value);
      }
      break;

    case SMS_TEMPLATE_ID:
      if (value == null) {
        unsetSmsTemplateId();
      } else {
        setSmsTemplateId((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case JWT:
      return getJwt();

    case BASE64IMAGE:
      return getBase64image();

    case SMS_TEMPLATE_ID:
      return getSmsTemplateId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case JWT:
      return isSetJwt();
    case BASE64IMAGE:
      return isSetBase64image();
    case SMS_TEMPLATE_ID:
      return isSetSmsTemplateId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SendPhotoRequestData)
      return this.equals((SendPhotoRequestData)that);
    return false;
  }

  public boolean equals(SendPhotoRequestData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_jwt = true && this.isSetJwt();
    boolean that_present_jwt = true && that.isSetJwt();
    if (this_present_jwt || that_present_jwt) {
      if (!(this_present_jwt && that_present_jwt))
        return false;
      if (!this.jwt.equals(that.jwt))
        return false;
    }

    boolean this_present_base64image = true && this.isSetBase64image();
    boolean that_present_base64image = true && that.isSetBase64image();
    if (this_present_base64image || that_present_base64image) {
      if (!(this_present_base64image && that_present_base64image))
        return false;
      if (!this.base64image.equals(that.base64image))
        return false;
    }

    boolean this_present_smsTemplateId = true && this.isSetSmsTemplateId();
    boolean that_present_smsTemplateId = true && that.isSetSmsTemplateId();
    if (this_present_smsTemplateId || that_present_smsTemplateId) {
      if (!(this_present_smsTemplateId && that_present_smsTemplateId))
        return false;
      if (this.smsTemplateId != that.smsTemplateId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetJwt()) ? 131071 : 524287);
    if (isSetJwt())
      hashCode = hashCode * 8191 + jwt.hashCode();

    hashCode = hashCode * 8191 + ((isSetBase64image()) ? 131071 : 524287);
    if (isSetBase64image())
      hashCode = hashCode * 8191 + base64image.hashCode();

    hashCode = hashCode * 8191 + ((isSetSmsTemplateId()) ? 131071 : 524287);
    if (isSetSmsTemplateId())
      hashCode = hashCode * 8191 + smsTemplateId;

    return hashCode;
  }

  @Override
  public int compareTo(SendPhotoRequestData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetJwt()).compareTo(other.isSetJwt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJwt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jwt, other.jwt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBase64image()).compareTo(other.isSetBase64image());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase64image()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base64image, other.base64image);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSmsTemplateId()).compareTo(other.isSetSmsTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmsTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsTemplateId, other.smsTemplateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SendPhotoRequestData(");
    boolean first = true;

    if (isSetJwt()) {
      sb.append("jwt:");
      if (this.jwt == null) {
        sb.append("null");
      } else {
        sb.append(this.jwt);
      }
      first = false;
    }
    if (isSetBase64image()) {
      if (!first) sb.append(", ");
      sb.append("base64image:");
      if (this.base64image == null) {
        sb.append("null");
      } else {
        sb.append(this.base64image);
      }
      first = false;
    }
    if (isSetSmsTemplateId()) {
      if (!first) sb.append(", ");
      sb.append("smsTemplateId:");
      sb.append(this.smsTemplateId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SendPhotoRequestDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SendPhotoRequestDataStandardScheme getScheme() {
      return new SendPhotoRequestDataStandardScheme();
    }
  }

  private static class SendPhotoRequestDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<SendPhotoRequestData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SendPhotoRequestData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JWT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jwt = iprot.readString();
              struct.setJwtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BASE64IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.base64image = iprot.readString();
              struct.setBase64imageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SMS_TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.smsTemplateId = iprot.readI32();
              struct.setSmsTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SendPhotoRequestData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.jwt != null) {
        if (struct.isSetJwt()) {
          oprot.writeFieldBegin(JWT_FIELD_DESC);
          oprot.writeString(struct.jwt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.base64image != null) {
        if (struct.isSetBase64image()) {
          oprot.writeFieldBegin(BASE64IMAGE_FIELD_DESC);
          oprot.writeString(struct.base64image);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSmsTemplateId()) {
        oprot.writeFieldBegin(SMS_TEMPLATE_ID_FIELD_DESC);
        oprot.writeI32(struct.smsTemplateId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SendPhotoRequestDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SendPhotoRequestDataTupleScheme getScheme() {
      return new SendPhotoRequestDataTupleScheme();
    }
  }

  private static class SendPhotoRequestDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<SendPhotoRequestData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SendPhotoRequestData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetJwt()) {
        optionals.set(0);
      }
      if (struct.isSetBase64image()) {
        optionals.set(1);
      }
      if (struct.isSetSmsTemplateId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetJwt()) {
        oprot.writeString(struct.jwt);
      }
      if (struct.isSetBase64image()) {
        oprot.writeString(struct.base64image);
      }
      if (struct.isSetSmsTemplateId()) {
        oprot.writeI32(struct.smsTemplateId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SendPhotoRequestData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.jwt = iprot.readString();
        struct.setJwtIsSet(true);
      }
      if (incoming.get(1)) {
        struct.base64image = iprot.readString();
        struct.setBase64imageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.smsTemplateId = iprot.readI32();
        struct.setSmsTemplateIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

